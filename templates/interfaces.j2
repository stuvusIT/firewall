# {{ ansible_managed }}

{% if network_management_pre_up is defined %}

# execute user-defined pre-up commands
pre-up {{ network_management_pre_up }}
{% endif %}
{% if network_management_pre_down is defined %}

# execute user-defined pre-down commands
pre-down {{ network_management_pre_down }}
{% endif %}

auto lo
iface lo inet loopback

{% if bridges|length > 0 and network_management_clear_bridges %}
# Delete all network bridges
pre-up for br in `ovs-vsctl list-br`; do ovs-vsctl --if-exists del-br "$br"; done
{% endif %}
{% if interfaces|length > 0 %}

################################################################################
# Configure all network interfaces                                             #
################################################################################
{% endif %}
{% for interface in interfaces %}{% if interface.name is defined %}
{% if interface.bring_up|default(network_management_default_bring_up) %}
auto {{ interface.name }}
{% endif -%}
iface {{ interface.name }} inet {{ interface.type|default(network_management_default_type) }}
{% if interface.mtu is defined or network_management_default_mtu is defined %}	mtu {{ interface.mtu|default(network_management_default_mtu) }}{% endif %}
{% if interface.type|default(network_management_default_type) == "dhcp" %}
	hostname {{ interface.hostname|default(ansible_hostname) }}
	{% if interface.leasetime is defined or
	network_management_default_dhcp_options.leasetime is defined %}leasetime {{ interface.leasetime|default(network_management_default_dhcp_options.leasetime) }}{% endif %}
	{% if interface.metric is defined or
	network_management_default_dhcp_options.metric is defined %}metric {{ interface.metric|default(network_management_default_dhcp_options.metric) }}{% endif %}
{% elif interface.type|default(network_management_default_type) == "static" or
   interface.type|default(network_management_default_type) == "manual" -%}

{% for ip in interface.ips %}
	{% if not loop.first %}

iface {{ interface.name }} inet {{ interface.type|default(network_management_default_type) }}
	{% endif -%}
	address {{ ip | ipaddr('address') }}
	network {{ ip | ipaddr('network') }}
	netmask {{ ip | ipaddr('netmask') }}
	broadcast {{ interface.broadcast|default(ip | ipaddr('broadcast')) }}
{% if interface.gateway is defined %}
	gateway {{ interface.gateway|ipaddr('address') }}
{% endif %}
{% endfor %}
{% endif %}
	dns-nameservers{% for nameserver in interface.nameservers|default(network_management_nameservers) %} {{ nameserver|ipaddr('address') }}{% endfor %}{# for loop, to allow ipaddr filter usage #}


{% endif %}{% endfor %}
{% if bridges|length > 0 %}

################################################################################
# Configure all network bridges                                                #
################################################################################
# Bring up all ports for all bridges
{% for bridge in bridges %}
{% for port in bridge.ports | default({}) %}
auto {{ port.port }}
iface {{ port.port }} inet manual

{% endfor %}
{% endfor %}

# Bring all openvswitch bridges up and configure ovs
{% for bridge in bridges %}
{% if bridge.bring_up|default(network_management_default_bring_up) %}
auto {{ bridge.name }}
{% endif -%}
iface {{ bridge.name }} inet {{ bridge.type|default(network_management_default_type) }}
{% if bridge.mtu is defined or network_management_default_mtu is defined %}	mtu {{ bridge.mtu|default(network_management_default_mtu) }}{% endif %}
	pre-up ovs-vsctl --may-exist add-br {{ bridge.name }}{% if bridge.parent is defined %} {{ bridge.parent }} {{ bridge.vlan }}{% endif %}{{ '' }}
{% for port in bridge.ports | default({}) %}
	pre-up ovs-vsctl --may-exist add-port {{ bridge.name }} {{ port.port }}{% if port.vlan is defined %} tag={{ port.vlan }}{% endif -%}
	{%- if port.type is defined or network_management_default_port_type is defined %} -- set interface {{ port.port }} type={{ port.type|default(network_management_default_port_type) -}}
	{%- if port.options is defined or network_management_default_port_options is defined %} options:{{ port.options|default(network_management_default_port_options)|join(' options:') }}{% endif %}{% endif %}{{ '' }}
{% endfor %}
{% if bridge.type|default(network_management_default_type) == "dhcp" %}
	hostname {{ bridge.hostname|default(ansible_hostname) }}
	{% if bridge.leasetime is defined or
	network_management_default_dhcp_options.leasetime is defined %}leasetime {{ bridge.leasetime|default(network_management_default_dhcp_options.leasetime) }}{% endif %}
	{% if bridge.metric is defined or
	network_management_default_dhcp_options.metric is defined %}metric {{ bridge.metric|default(network_management_default_dhcp_options.metric) }}{% endif %}

{% elif bridge.type|default(network_management_default_type) == "static" or
   bridge.type|default(network_management_default_type) == "manual" -%}

{% for ip in bridge.ips %}{# start: additional ips #}
	{% if not loop.first %}

iface {{ bridge.name }} inet {{ bridge.type|default(network_management_default_type) }}
	{% endif -%}
	address {{ ip | ipaddr('address') }}
	network {{ ip | ipaddr('network') }}
	netmask {{ ip | ipaddr('netmask') }}
	broadcast {{ bridge.broadcast|default(ip | ipaddr('broadcast')) }}
{% if bridge.gateway is defined %}
	gateway {{ bridge.gateway|ipaddr('address') }}
{% endif %}
{% endfor %}{# end: additional ips #}
{% endif %}
	dns-nameservers{% for nameserver in bridge.nameservers|default(network_management_nameservers) %} {{ nameserver|ipaddr('address') }}{% endfor %}{{ '\n' }}{# for loop, to allow ipaddr filter usage #}
{% for port in bridge.ports | default({}) %}
	post-down ovs-vsctl --if-exists del-port {{ bridge.name }} {{ port.port }}
{% endfor %}
	post-down ovs-vsctl --if-exists del-br {{ bridge.name }}


{% endfor %}
{% if patch_field is defined %}

################################################################################
# OpenVswitch Patchfield, connect requested ports together                     #
################################################################################
{% for patch_field_dev_in, patch_field_dev_out in patch_field.iteritems() %}
post-up ovs-vsctl {{''
	-}} --may-exist add-port {{ patch_field_dev_in }} {{ patch_field_dev_in }}_patch_{{ loop.index }} -- {{''
	-}} set interface {{ patch_field_dev_in }}_patch_{{ loop.index }} type=patch options:peer={{ patch_field_dev_out }}_patch_{{ loop.index }} -- {{''
	-}} --may-exist add-port {{ patch_field_dev_out }} {{ patch_field_dev_out }}_patch_{{ loop.index }} -- {{''
	-}} set interface {{ patch_field_dev_out }}_patch_{{ loop.index }} type=patch options:peer={{ patch_field_dev_in }}_patch_{{ loop.index }}; true
{% endfor %}
{% endif %}{# end: if patch_field #}
{% endif %}{# end: if bridges #}
{% if network_management_default_gateway is defined %}

# set default route
post-up ip r replace default via {{ network_management_default_gateway }}{% if network_management_default_src_address is defined %} src {{ network_management_default_src_address }}{% endif %}
{% endif %}
{% if network_management_post_down is defined %}

# execute user-defined post-down command
post-down {{ network_management_post_down }}
{% endif %}
{% if network_management_post_up is defined %}

# execute user-defined post-up command
post-up {{ network_management_post_up }}
{% endif %}
