---
- name: Auto detect interface names
  set_fact:
    interfaces: |
      [{%- for item in interfaces -%}
      {%- set f_ip_a=[item.ip] if "ip" in item else [] -%}{# get the primary ip address (ip field) #}
      {%- set ips=item['ips']|default([])|union(f_ip_a)|unique -%}{# concat ip field to list of all ips #}
      {%- if 'mac' in item -%}
        {%- for interface in ansible_interfaces -%}{# only check real interfaces #}
          {%- if "ansible_"+interface in hostvars[ansible_hostname] and hostvars[ansible_hostname]["ansible_"+interface]['macaddress']|default(None)|lower == item["mac"]|default(None)|lower -%}
            {{ item|combine({"name":interface,"ips":ips}) }}
          {%- endif -%}
        {%- endfor -%}
      {%- else -%}
        {{ item|combine({"ips":ips}) }}
      {%- endif -%}{% if not loop.last %},{% endif %}
      {%- endfor -%}]

- name: Prepare bridges
  set_fact:
    bridges: |
      [{%- for item in bridges -%}
      {%- set f_ip_a=[item.ip] if "ip" in item else [] -%}{# get the primary ip address (ip field) #}
      {%- set ips=item['ips']|default([])|union(f_ip_a)|unique -%}{# concat ip field to list of all ips #}
      {%- if 'mac' in item -%}
        {%- for interface in ansible_interfaces -%}{# only check real interfaces #}
          {%- if "ansible_"+interface in hostvars[ansible_hostname] and hostvars[ansible_hostname]["ansible_"+interface]['macaddress']|default(None)|lower == item["mac"]|default(None)|lower -%}
            {{ item|combine({"name":interface,"ips":ips}) }}
          {%- endif -%}
        {%- endfor -%}
      {%- else -%}
        {{ item|combine({"ips":ips}) }}
      {%- endif -%}{% if not loop.last %},{% endif %}
      {%- endfor -%}]

- name: Append default CIDR if not already specified (interfaces)
  set_fact:
    interfaces: |
      [{%- for item in interfaces -%}
      {%- set n_ips=[] -%}
      {%- for ip in item['ips'] -%}
        {%- if ip|search("/[0-9]*") -%}
          {%- set n_ip=ip -%}
        {%- else -%}
          {%- set n_ip=ip+network_management_default_cidr -%}
        {%- endif -%}
        {%- set n_ips=n_ips|union([n_ip]) -%}
        {%- if loop.last -%}
          {{ item|combine({"ips":n_ips}) }}
        {%- endif -%}
      {%- else -%}
        {{ item|combine({"ips":n_ips}) }}
      {%- endfor -%}
      {%- if not loop.last -%},{%- endif -%}
      {%- endfor -%}]

- name: Append default CIDR if not already specified (bridges)
  set_fact:
    bridges: |
      [{%- for item in bridges -%}
      {%- set n_ips=[] -%}
      {%- for ip in item['ips'] -%}
        {%- if ip|search("/[0-9]*") -%}
          {%- set n_ip=ip -%}
        {%- else -%}
          {%- set n_ip=ip+network_management_default_cidr -%}
        {%- endif -%}
        {%- set n_ips=n_ips|union([n_ip]) -%}
        {%- if loop.last -%}
          {{ item|combine({"ips":n_ips}) }}
        {%- endif -%}
      {%- else -%}
        {{ item|combine({"ips":n_ips}) }}
      {%- endfor -%}
      {%- if not loop.last -%},{%- endif -%}
      {%- endfor -%}]

- name: Configure Debian networking
  template:
    src: interfaces.j2
    dest: /etc/network/interfaces
  notify: reload_network
  when: ansible_os_family == "Debian" and not network_management_always_script

- meta: flush_handlers
